1 - arg1 mods var x used by arg2, has path through call that modifies var x. Output: Bool, Input: Int_Int 
assign a1;
Select BOOLEAN such that Affects(1, 5)
FALSE
5000
2 - arg1 mods var y used by arg2, has path through if-else that modifies var y by def. Output: Bool, Input: Int_Int 
assign a1;
Select BOOLEAN such that Affects(2, 5)
FALSE
5000
3 - arg1 mods var z used by arg2, diff proc. Output: Bool, Input: Int_Int
assign a1;
Select BOOLEAN such that Affects (3, 10)
FALSE
5000
4 - Output: Tuple, Input: Syn_Syn
assign a1, a2;
Select <a2, a1> such that Affects (a1, a2) with a1.stmt# = 6
9 6, 10 6
5000
5 - variable assigned in stmt 6 if stmt 6 has at least one Affects rel. Output: Syn, Input: Syn_Syn
assign a1, a2; variable v;
Select v such that Affects (a1, a2) pattern a1(v, _) with a1.stmt# = 6
x
5000
6 - all variables of arg1 of any Affects rel. Output: Syn, Input: Syn_Syn
assign a1, a2; variable v;
Select v such that Affects (a1, a2) pattern a1(v, _)
z,y,x,t
5000
7 - return all stmts which are arg1 of any Affects rel. Output: StmtNo, Input: Syn_Wildcard
assign a1;
Select a1 such that Affects (a1, _)
2,3,6,7,9
5000
8 - return all tuples of all Affects rel. Output: Tuple, Input: Syn_Syn
assign a1, a2;
Select <a1, a2> such that Affects (a1, a2)
2 3, 3 5, 6 9, 6 10, 7 11, 9 11
5000
9 - return all tuples of all Affects* rel. Output: Tuple, Input: Syn_Syn
assign a1, a2;
Select <a1, a2> such that Affects*(a1, a2)
2 3, 3 5, 6 9, 6 10, 7 11, 9 11, 2 5, 6 11
5000
10 - return all tuples of all arg1xarg2 of Affects rel. Output: Tuple, Input: Syn_Wildcard, Wildcard_Syn
assign a1, a2;
Select <a1, a2> such that Affects (a1, _) and Affects (_, a2)
2 3, 2 9, 2 10, 2 11, 2 5, 3 3, 3 9, 3 10, 3 11, 3 5, 6 3, 6 9, 6 10, 6 11, 6 5, 7 3, 7 9, 7 10, 7 11, 7 5, 9 3, 9 9, 9 10, 9 11, 9 5
5000
11 - return all variables of all assignments if there is at least one valid Affects rel. Output: Syn, Input: Wildcard_Wildcard
variable v; assign a;
Select v such that Affects(_,_) pattern a(v, _)
x,y,z,t
5000